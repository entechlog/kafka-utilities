---
version: '2'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION_TAG}
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka:${CONFLUENT_VERSION_TAG}
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION_TAG}
    ports:
      - 8081:8081
    container_name: schema-registry
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300

  ksqldb-server:
    image: confluentinc/ksqldb-server:${CONFLUENT_VERSION_TAG}
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
    ports:
      - "8088:8088"
    volumes:
    - ./ksql/create_its_raining_events.sql:/opt/queries/queries.sql
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:9092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      # Uncomment/Comment based on deployment needs (head/headless)
      # KSQL_KSQL_QUERIES_FILE: /opt/queries/queries.sql
      KSQL_KSQL_SERVICE_ID: ${KSQL_KSQL_SERVICE_ID}
    restart: unless-stopped

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:${CONFLUENT_VERSION_TAG}
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  kafka-connect:
    image: confluentinc/cp-kafka-connect:${CONFLUENT_VERSION_TAG}
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_CUB_KAFKA_TIMEOUT: 300
      CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group-weather-alert-app
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-group-weather-alert-app-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-group-weather-alert-app-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-group-weather-alert-app-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/,/data/connect-jars'
      # External secrets config
      # See https://docs.confluent.io/current/connect/security.html#externalizing-secrets
      CONNECT_CONFIG_PROVIDERS: 'file'
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: 'org.apache.kafka.common.config.provider.FileConfigProvider'
    volumes:
      - ./kafka-connect/connect-secrets.properties:/data/credentials.properties
    command: 
      # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
      - bash 
      - -c 
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt fbascheper/kafka-connect-telegram:0.2.0
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity

  control-center:
    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_VERSION_TAG}
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - ksqldb-server
      - kafka-connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_CONNECT_CLUSTER: 'http://kafka-connect:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafkacat:
    image: edenhill/kafkacat:1.6.0
    container_name: kafkacat
    entrypoint: 
      - /bin/sh 
      - -c 
      - |
        apk add jq; 
        while [ 1 -eq 1 ];do sleep 60;done

  airflow-postgres:
    image: postgres:${POSTGRES_VERSION_TAG}
    container_name: airflow-postgres
    environment:
        - POSTGRES_USER=airflow
        - POSTGRES_PASSWORD=airflow
        - POSTGRES_DB=airflow
    logging:
        options:
            max-size: 10m
            max-file: "3"
            
  airflow-initdb:
    image: apache/airflow:${AIRFLOW_VERSION_TAG}
    container_name: airflow-initdb
    entrypoint: airflow upgradedb
    depends_on:
      - airflow-postgres
    env_file:
      - ./docker/airflow/.env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
  
  airflow-scheduler:
    image: entechlog/airflow:${AIRFLOW_VERSION_TAG}
    container_name: airflow-scheduler
    build:
      context: ./docker/airflow/
      args:
        AIRFLOW_VERSION_TAG: ${AIRFLOW_VERSION_TAG}
    entrypoint: airflow scheduler
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - airflow-postgres
      - airflow-initdb
    env_file:
      - ./docker/airflow/.env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
 
  airflow-webserver:
    image: apache/airflow:${AIRFLOW_VERSION_TAG}
    container_name: airflow-webserver
    entrypoint: airflow webserver
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - airflow-postgres
      - airflow-initdb
      - airflow-scheduler
    env_file:
      - ./docker/airflow/.env
    volumes:
       - ./dags:/opt/airflow/dags
       - ./logs:/opt/airflow/logs
    ports:
      - "8080:8080"

  weather-alert-app:
    image: entechlog/weather-alert-app
    container_name: weather-alert-app
    build: ./docker/app/
    command: 
      - bash 
      - -c 
      - |
        echo "Launching weather-alert-app"
        #
        sleep infinity
        